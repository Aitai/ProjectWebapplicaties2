openapi: 3.0.3
info:
  title: 'Hanze Project 2.3'
  description: 'Weather API for the Society for the Protection of Birds'
  version: 1.0.0
servers:
  -
    url: 'localhost:8000'
paths:
  /authentication:
    post:
      summary: 'Basic login'
      description: 'This is used for first time authentication.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  token: String
                properties:
                  token:
                    type: string
                    example: String
        401:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "\"error\": {\n \"code\": 401,\n \"message\": \"Invalid credentials.\"\n}"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'E-mail of the user.'
                  example: development@dxmusic.nl
                password:
                  type: string
                  description: 'Password of the user.'
                  example: password
              required:
                - email
                - password
      security: []
  /authentication/jwt:
    get:
      summary: 'Renew token'
      description: 'With this endpoint you can request a new token, the current one should be valid.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  token: String
                properties:
                  token:
                    type: string
                    example: String
        401:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "\"error\": {\n \"code\": 401,\n \"message\": \"Unauthorized.\"\n}"
      tags:
        - Authentication
  /:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: 'Lumen (9.0.2) (Laravel Components ^9.0)'
      tags:
        - Endpoints
      security: []
  /stations/sendWeatherData:
    post:
      summary: 'Send weather data to backend'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Weather Data'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                WEATHERDATA:
                  type: array
                  description: 'Two dimensional array containing all values.'
                  example:
                    - '100020'
                    - '1970-01-01 00:00'
                    - 10
                    - 10
                    - 10
                    - 10
                    - 10
                    - 10
                    - 10
                    - 10
                    -
                      - 0
                      - 0
                      - 0
                      - 0
                      - 0
                      - 0
                  items:
                    type: string
              required:
                - WEATHERDATA
      security: []
  /stations/getWeatherData:
    get:
      summary: 'Get all weather data'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "[\n {\n     \"id\": Int,\n     \"station_name\": \"Int\",\n     \"datetime\": \"Timestamp\"\n     \"temp\": \"Float\",\n     \"dew_point_temp\": \"Float\",\n     \"station_air_pressure\": \"Float\",\n     \"sea_level_air_pressure\": \"Float\",\n     \"visibility\": \"Float\",\n     \"wind_speed\": \"Float\",\n     \"precipitation\": \"Float\",\n     \"snow_depth\": \"Float\",\n     \"cloud_cover_percentage\": \"Float\",\n     \"wind_direction\": Int,\n     \"frost\": Int,\n     \"rain\": Int,\n     \"snow\": Int,\n     \"hail\": Int,\n     \"thunderstorm\": Int,\n     \"tornado\": Int\n }\n]"
      tags:
        - 'Weather Data'
      security: []
  /stations/getStations:
    get:
      summary: 'Get a list of available stations.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"data\" :\n [\n     {\n         \"name\": \"Int\",\n         \"longitude\": Float,\n         \"latitude\": Float,\n         \"elevation\": Int,\n         \"is_active\": Boolean,\n         \"temp\": Float,\n         \"dew_point_temp\": Float,\n         \"station_air_pressure\": Float,\n         \"sea_level_air_pressure\": Float,\n         \"visibility\": Float,\n         \"wind_speed\": FLoat,\n         \"precipitation\": Float,\n         \"snow_depth\": Int,\n         \"cloud_cover_percentage\": Int,\n         \"wind_direction\": Float,\n         \"frost\": Int,\n         \"rain\": Int,\n         \"snow\": Int,\n         \"hail\": Int,\n         \"thunderstorm\": Int,\n         \"tornado\": Int\n     }\n ],\n \"current_page\": 1,\n \"first_page_url\": \"http:\\/\\/localhost:8000\\/stations\\/getStations?page=1\",\n \"from\": 1,\n \"last_page\": Int,\n \"last_page_url\": \"http:\\/\\/localhost:8000\\/stations\\/getStations?page=Int\",\n \"links\":\n [\n     {\n         \"url\": Url,\n         \"label\": \"pagination.previous\",\n         \"active\": Boolean\n     },\n     {\n         \"url\": \"http:\\/\\/localhost:8000\\/stations\\/getStations?page=1\",\n         \"label\": \"1\",\n         \"active\": Boolean\n     },\n ],\n \"next_page_url\": \"http:\\/\\/localhost:8000\\/stations\\/getStations?page=2\",\n \"path\": \"http:\\/\\/localhost:8000\\/stations\\/getStations\",\n \"per_page\": 10,\n \"prev_page_url\": null,\n \"to\": 10,\n \"total\": Int\n}"
      tags:
        - 'Weather Data'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'Page number.'
                  example: 1
                ordered_row:
                  type: string
                  description: 'On which row the data is sorted.'
                  example: temp
                order_by:
                  type: string
                  description: 'The order in which the data is sorted.'
                  example: asc
      security: []
  '/stations/getWeatherData/{station_name}':
    get:
      summary: 'Get weather data using the station name.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"station\":\n     {\n         \"name\": \"Int\",\n         \"longitude\": Float,\n         \"latitude\": Float,\n         \"elevation\": Int\n     },\n     \"measurements\":\n     [\n         {\n             \"id\": Int,\n             \"station_name\": \"Int\",\n             \"datetime\": \"Timestamp\",\n             \"temp\": \"Float\",\n             \"dew_point_temp\": \"Float\",\n             \"station_air_pressure\": \"Float\",\n             \"sea_level_air_pressure\": \"Float\",\n             \"visibility\": \"Float\",\n             \"wind_speed\": \"Float\",\n             \"precipitation\": \"Float\",\n             \"snow_depth\": \"Float\",\n             \"cloud_cover_percentage\": \"Float\",\n             \"wind_direction\": Int,\n             \"frost\": Int,\n             \"rain\": Int,\n             \"snow\": Int,\n             \"hail\": Int,\n             \"thunderstorm\": Int,\n             \"tornado\": Int\n         }\n     ],\n     \"nearest_location\":\n         {\n             \"id\": Int,\n             \"station_name\": \"Int\",\n             \"name\": \"String\",\n             \"administrative_region1\": \"String\",\n             \"administrative_region2\": \"String\",\n             \"country_code\": \"String\",\n             \"longitude\": Float,\n             \"latitude\": Float\n         },\n     \"geo_location\":\n     {\n         \"id\": Int,\n         \"station_name\": \"Int\",\n         \"country_code\": \"String\",\n         \"island\": \"String\",\n         \"county\": \"String\",\n         \"place\": \"String\",\n         \"hamlet\": \"String\",\n         \"town\": \"String\",\n         \"municipality\": \"String\",\n         \"state_district\": \"String\",\n         \"administrative\": \"String\",\n         \"state\": \"String\",\n         \"village\": \"String\",\n         \"region\": \"String\",\n         \"province\": \"String\",\n         \"city\": \"String\",\n         \"locality\": \"String\",\n         \"postcode\": \"Int\",\n         \"country\": \"String\"\n     }\n }\n}"
        404:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "\"error\": {\n \"code\": 404,\n \"message\": \"No station with that name\"\n}"
      tags:
        - 'Weather Data'
      security: []
    parameters:
      -
        in: path
        name: station_name
        description: 'Valid station name.'
        example: '170220'
        required: true
        schema:
          type: string
  /stations/getLowestTemperatures:
    get:
      summary: 'Get lowest temperatures of the last four weeks.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    max_temp: Float
                    date: Timestamp
                    town: String
                  -
                    max_temp: Float
                    date: Timestamp
                    town: String
      tags:
        - 'Weather Data'
      security: []
  /stations/getPeakWindSpeeds:
    get:
      summary: 'Get peak wind speeds of the last four weeks.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    max_wind_speed: Float
                    date: Timestamp
                    town: String
                  -
                    max_wind_speed: Float
                    date: Timestamp
                    town: String
      tags:
        - 'Weather Data'
      security: []
  /stations/getExport:
    get:
      summary: 'Get an XML export of the last four weeks'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<weather>\n <Item0>\n     <id>Int</id>\n     <station_name>Int</station_name>\n     <datetime>Timestamp</datetime>\n     <temp>Float</temp>\n     <dew_point_temp>Float</dew_point_temp>\n     <station_air_pressure>Float</station_air_pressure>\n     <sea_level_air_pressure>Float</sea_level_air_pressure>\n     <visibility>Float</visibility>\n     <wind_speed>Float</wind_speed>\n     <precipitation>Float</precipitation>\n     <snow_depth>Float</snow_depth>\n     <cloud_cover_percentage>Float</cloud_cover_percentage>\n     <wind_direction>Int</wind_direction>\n     <frost>Int</frost>\n     <rain>Int</rain>\n     <snow>Int</snow>\n     <hail>Int</hail>\n     <thunderstorm>Int</thunderstorm>\n     <tornado>Int</tornado>\n     <Itemstation>\n         <name>Int</name>\n         <longitude>Float</longitude>\n         <latitude>Float</latitude>\n         <elevation>Int</elevation>\n     </Itemstation>\n     <Itemgeo_location>\n         <id>Int</id>\n         <station_name>Int</station_name>\n         <country_code>String</country_code>\n         <island>String</island>\n         <county>String</county>\n         <place>String</place>\n         <hamlet>String</hamlet>\n         <town>String</town>\n         <municipality>String</municipality>\n         <state_district>String</state_district>\n         <administrative>String</administrative>\n         <state>String</state>\n         <village>String</village>\n         <region>String</region>\n         <province>String</province>\n         <city>String</city>\n         <locality>String</locality>\n         <postcode>String</postcode>\n         <country>String</country>\n     </Itemgeo_location>\n     <Itemcorrection>\n         <Item0>\n             <id>Int</id>\n             <weather_data_id>Int</weather_data_id>\n             <type>String</type>\n             <original_value>Float</original_value>\n         </Item0>\n     </Itemcorrection>\n </Item0>\n</weather>"
      tags:
        - 'Weather Data'
      security: []
tags:
  -
    name: Authentication
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'Weather Data'
    description: "\nAPI's for everything related to weather data and stations."
